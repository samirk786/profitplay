"use strict";(()=>{var e={};e.id=123,e.ids=[123],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},29834:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>y,originalPathname:()=>P,patchFetch:()=>f,requestAsyncStorage:()=>u,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m,staticGenerationBailout:()=>_});var s={};t.r(s),t.d(s,{GET:()=>c,POST:()=>p});var a=t(95419),o=t(69108),n=t(99678),i=t(78070),d=t(25864);async function p(e){try{let r=e.headers.get("authorization"),t=process.env.CRON_SECRET;if(t&&r!==`Bearer ${t}`)return i.Z.json({error:"Unauthorized"},{status:401});console.log("\uD83D\uDD50 Starting scheduled odds update...");let s=[];for(let e of["basketball_nba","americanfootball_nfl","baseball_mlb","icehockey_nhl"])try{console.log(`📊 Updating odds for ${e}...`);let r=await fetch(`${process.env.NEXTAUTH_URL}/api/odds/sync`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sport:e})});if(r.ok){let t=await r.json();s.push({sport:e,success:!0,stats:t.stats})}else s.push({sport:e,success:!1,error:"Sync failed"})}catch(r){console.error(`❌ Failed to update ${e}:`,r),s.push({sport:e,success:!1,error:r instanceof Error?r.message:"Unknown error"})}return console.log("✅ Scheduled odds update completed"),i.Z.json({success:!0,timestamp:new Date().toISOString(),results:s})}catch(e){return console.error("Cron job error:",e),i.Z.json({error:"Cron job failed",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function c(){try{let e=await d.s.checkUsage();return i.Z.json({status:"active",apiUsage:e,lastRun:new Date().toISOString(),nextRun:"Every 15 minutes"})}catch(e){return i.Z.json({error:"Failed to check cron status",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let l=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/odds/cron/route",pathname:"/api/odds/cron",filename:"route",bundlePath:"app/api/odds/cron/route"},resolvedPagePath:"/Users/samirkassam/Desktop/PP2/profitplay/app/api/odds/cron/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:u,staticGenerationAsyncStorage:m,serverHooks:h,headerHooks:y,staticGenerationBailout:_}=l,P="/api/odds/cron/route";function f(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},25864:(e,r,t)=>{t.d(r,{s:()=>a});class s{constructor(){if(this.baseUrl="https://api.the-odds-api.com/v4",this.apiKey=process.env.ODDS_API_KEY||"",!this.apiKey)throw Error("ODDS_API_KEY environment variable is required")}async fetchOdds(e,r=["h2h","spreads","totals"]){try{let t=new URLSearchParams({apiKey:this.apiKey,sport:e,markets:r.join(","),regions:"us",oddsFormat:"american",dateFormat:"iso"}),s=await fetch(`${this.baseUrl}/sports/${e}/odds/?${t}`);if(!s.ok)throw Error(`Odds API error: ${s.status} ${s.statusText}`);let a=await s.json();return this.processOddsData(a)}catch(e){throw console.error("Error fetching odds:",e),e}}async fetchPlayerProps(e){try{return console.log(`Creating mock player props data for ${e}`),[{eventId:`player_props_${Date.now()}_1`,sport:this.mapSportName(e),league:"Player Props",participants:["Josh Allen","Buffalo Bills"],startTime:new Date(Date.now()+864e5),markets:[{marketType:"PLAYER_PASS_YDS",bookmaker:"DraftKings",odds:{over:{total:276,odds:-110},under:{total:276,odds:-110}}}]},{eventId:`player_props_${Date.now()}_2`,sport:this.mapSportName(e),league:"Player Props",participants:["Christian McCaffrey","San Francisco 49ers"],startTime:new Date(Date.now()+864e5),markets:[{marketType:"PLAYER_RUSH_YDS",bookmaker:"DraftKings",odds:{over:{total:96,odds:-105},under:{total:96,odds:-115}}}]}]}catch(e){throw console.error("Error fetching player props:",e),e}}async fetchSports(){try{let e=await fetch(`${this.baseUrl}/sports/?apiKey=${this.apiKey}`);if(!e.ok)throw Error(`Sports API error: ${e.status} ${e.statusText}`);return await e.json()}catch(e){throw console.error("Error fetching sports:",e),e}}processPlayerPropsData(e){return e.map(e=>{let r=[e.away_team,e.home_team],t=new Date(e.commence_time),s=e.bookmakers.flatMap(e=>e.markets.map(r=>({marketType:this.mapPlayerPropsMarketType(r.key),bookmaker:e.title,odds:this.processPlayerPropsOutcomes(r.outcomes,r.key)})));return{eventId:e.id,sport:this.mapSportName(e.sport_title),league:e.sport_title,participants:r,startTime:t,markets:s}})}processOddsData(e){return e.map(e=>{let r=[e.away_team,e.home_team],t=new Date(e.commence_time),s=e.bookmakers.flatMap(e=>e.markets.map(r=>({marketType:this.mapMarketType(r.key),bookmaker:e.title,odds:this.processMarketOutcomes(r.outcomes,r.key)})));return{eventId:e.id,sport:this.mapSportName(e.sport_title),league:e.sport_title,participants:r,startTime:t,markets:s}})}mapMarketType(e){return({h2h:"MONEYLINE",spreads:"SPREAD",totals:"TOTAL",btts:"PROPS"})[e]||"PROPS"}mapPlayerPropsMarketType(e){return({player_pass_tds:"PLAYER_PASS_TDS",player_pass_yds:"PLAYER_PASS_YDS",player_pass_completions:"PLAYER_PASS_COMPLETIONS",player_rush_yds:"PLAYER_RUSH_YDS",player_rush_att:"PLAYER_RUSH_ATT",player_rec_yds:"PLAYER_REC_YDS",player_rec_receptions:"PLAYER_REC_RECEPTIONS",player_rec_tds:"PLAYER_REC_TDS"})[e]||"PLAYER_PROPS"}mapSportName(e){return({Basketball:"NBA","American Football":"NFL",Baseball:"MLB",Soccer:"SOCCER",Hockey:"NHL",Tennis:"TENNIS"})[e]||e.toUpperCase()}processMarketOutcomes(e,r){return"h2h"===r?{home:this.roundOdds(e.find(r=>r.name===e[1]?.name)?.price||0),away:this.roundOdds(e.find(r=>r.name===e[0]?.name)?.price||0)}:"spreads"===r?{home:{spread:this.roundSpread(e.find(r=>r.name===e[1]?.name)?.point||0),odds:this.roundOdds(e.find(r=>r.name===e[1]?.name)?.price||0)},away:{spread:this.roundSpread(e.find(r=>r.name===e[0]?.name)?.point||0),odds:this.roundOdds(e.find(r=>r.name===e[0]?.name)?.price||0)}}:"totals"===r?{over:{total:this.preserveDecimal(e.find(e=>e.name.includes("Over"))?.point||0),odds:this.roundOdds(e.find(e=>e.name.includes("Over"))?.price||0)},under:{total:this.preserveDecimal(e.find(e=>e.name.includes("Under"))?.point||0),odds:this.roundOdds(e.find(e=>e.name.includes("Under"))?.price||0)}}:e}processPlayerPropsOutcomes(e,r){let t=e.find(e=>e.name.includes("Over")||e.name.includes("o")),s=e.find(e=>e.name.includes("Under")||e.name.includes("u"));return t&&s?{over:{total:this.preserveDecimal(t.point||0),odds:this.roundOdds(t.price||0)},under:{total:this.preserveDecimal(s.point||0),odds:this.roundOdds(s.price||0)}}:e}roundOdds(e){return Math.round(100*e)/100}roundSpread(e){return isNaN(e)||!isFinite(e)?0:Math.round(10*e)/10}preserveDecimal(e){return isNaN(e)||!isFinite(e)?0:e}async checkUsage(){try{let e=await fetch(`${this.baseUrl}/sports/?apiKey=${this.apiKey}`);if(!e.ok)throw Error(`Usage API error: ${e.status} ${e.statusText}`);return{used:1,remaining:499}}catch(e){throw console.error("Error checking API usage:",e),e}}}let a=new s}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[638,206],()=>t(29834));module.exports=s})();