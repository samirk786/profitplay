// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  ageVerified   Boolean   @default(false)
  ageVerifiedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  subscriptions     Subscription[]
  challengeAccounts ChallengeAccount[]
  transactions      Transaction[]
  auditLogs         AuditLog[]
  payoutRequests    PayoutRequest[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(ACTIVE)
  plan                 SubscriptionPlan   @default(STARTER)
  renewAt              DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Ruleset {
  id              String           @id @default(cuid())
  name            String
  plan            SubscriptionPlan @unique
  profitTargetPct Float
  maxDailyLossPct Float
  maxDrawdownPct  Float
  maxStakePct     Float
  allowedMarkets  String[] // JSON array of allowed market types
  maxOdds         Float? // Maximum odds allowed (e.g., 500 for +500)
  consistencyRule Boolean          @default(false) // Any single day â‰¤ 40% of total challenge profit
  consistencyPct  Float? // 40% by default
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  challengeAccounts ChallengeAccount[]

  @@map("rulesets")
}

model ChallengeAccount {
  id            String         @id @default(cuid())
  userId        String
  rulesetId     String
  startBalance  Float
  equity        Float
  highWaterMark Float
  state         ChallengeState @default(ACTIVE)
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ruleset Ruleset @relation(fields: [rulesetId], references: [id])
  bets    Bet[]

  @@map("challenge_accounts")
}

model Market {
  id           String       @id @default(cuid())
  sport        String
  league       String
  eventId      String
  marketType   MarketType
  participants String[] // JSON array of team/player names
  status       MarketStatus @default(UPCOMING)
  startTime    DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  oddsSnapshots OddsSnapshot[]
  bets          Bet[]

  @@map("markets")
}

model OddsSnapshot {
  id        String   @id @default(cuid())
  marketId  String
  bookmaker String
  lineJSON  Json // Store odds data as JSON
  ts        DateTime @default(now())

  market Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  bets   Bet[]

  @@map("odds_snapshots")
}

model Bet {
  id                 String    @id @default(cuid())
  challengeAccountId String
  marketId           String
  oddsSnapshotId     String
  selection          String // Which side/outcome selected
  stake              Float
  potentialPayout    Float
  status             BetStatus @default(OPEN)
  placedAt           DateTime  @default(now())
  settledAt          DateTime?

  challengeAccount ChallengeAccount @relation(fields: [challengeAccountId], references: [id], onDelete: Cascade)
  market           Market           @relation(fields: [marketId], references: [id])
  oddsSnapshot     OddsSnapshot     @relation(fields: [oddsSnapshotId], references: [id])
  settlements      Settlement[]

  @@map("bets")
}

model Settlement {
  id         String   @id @default(cuid())
  betId      String
  resultJSON Json // Store settlement result as JSON
  source     String // "manual" or "api"
  ts         DateTime @default(now())

  bet Bet @relation(fields: [betId], references: [id], onDelete: Cascade)

  @@map("settlements")
}

model Transaction {
  id        String          @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Float
  currency  String          @default("USD")
  reference String? // Stripe payment intent ID, etc.
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model PayoutRequest {
  id         String              @id @default(cuid())
  userId     String
  amount     Float
  status     PayoutRequestStatus @default(PENDING)
  reviewedBy String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payout_requests")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  payload   Json // Store action payload as JSON
  ip        String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model FeatureFlag {
  key   String   @id
  value String
  ts    DateTime @default(now())

  @@map("feature_flags")
}

// Enums
enum UserRole {
  GUEST
  MEMBER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum SubscriptionPlan {
  STARTER
  STANDARD
  PRO
}

enum ChallengeState {
  ACTIVE
  PASSED
  FAILED
  PAUSED
}

enum MarketType {
  MONEYLINE
  SPREAD
  TOTAL
  PROPS
  PLAYER_PASS_TDS
  PLAYER_PASS_YDS
  PLAYER_PASS_COMPLETIONS
  PLAYER_RUSH_YDS
  PLAYER_RUSH_ATT
  PLAYER_REC_YDS
  PLAYER_REC_RECEPTIONS
  PLAYER_REC_TDS
}

enum MarketStatus {
  UPCOMING
  LIVE
  FINISHED
  CANCELLED
}

enum BetStatus {
  OPEN
  WON
  LOST
  PUSH
  CANCELLED
}

enum TransactionType {
  SUBSCRIPTION
  REFUND
  PAYOUT
  ADJUSTMENT
}

enum PayoutRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}
